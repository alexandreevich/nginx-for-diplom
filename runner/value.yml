# добавляем права на деплой, работает
imagePullPolicy: IfNotPresent
revisionHistoryLimit: 3
gitlabUrl: http://158.160.33.130
terminationGracePeriodSeconds: 3600
concurrent: 3
checkInterval: 5
logLevel: debug
logFormat: json
sessionServer:
  enabled: false
rbac:
  create: true
  serviceAccountName: gitlab-runner-sa  # Имя service account

  rules:
    - apiGroups: ["apps"]
      resources: ["deployments"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: [""]
      resources: ["pods", "pods/exec", "pods/attach", "secrets", "configmaps"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  clusterWideAccess: false
  podSecurityPolicy:
    enabled: false
    resourceNames:
    - gitlab-runner
metrics:
  enabled: true
  portName: metrics
  port: 9252
  serviceMonitor:
    enabled: false
service:
  enabled: false
runners:
  privileged: true
  config: |
    log_level = "debug"
    [[runners]]
      privileged = true
      output_limit = 10000
      [runners.kubernetes]
        image = "ubuntu:22.04"
        privileged = true
        service_account = "gitlab-runner-sa"  # Используем созданный ServiceAccount
        [[runners.kubernetes.volumes.host_path]]
          name = "docker-socket"
          mount_path = "/var/run/docker.sock"
          host_path = "/var/run/docker.sock"        
  executor: "kubernetes"
  secret: runner-secret
  volume_mounts:
    - mount_path: /certs/client
      name: docker-certs
    - mount_path: /var/lib/docker
      name: docker-cache
    - mount_path: /var/run/docker.sock
      name: docker-socket

  ## Volumes for DIND and other resources
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
    - name: docker-certs
      emptyDir: {}
    - name: docker-cache
      emptyDir: {}

  cachePath: "/opt/cache"
PodSecurityContext:
  runAsUser: 100
  fsGroup: 65533
resources:
  limits:
    memory: 2048Mi
    cpu: 2
  requests:
    memory: 1024Mi
    cpu: 1
